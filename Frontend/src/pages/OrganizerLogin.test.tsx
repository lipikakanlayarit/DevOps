import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { describe, it, expect, vi, beforeEach, afterEach } from "vitest";
import { MemoryRouter } from "react-router-dom";
import OrganizerLogin from "./OrganizerLogin";

// üß± mock fetch + alert + window.location
const mockFetch = vi.fn();
const mockAlert = vi.fn();
const mockAssign = vi.fn();

beforeEach(() => {
    vi.stubGlobal("fetch", mockFetch);
    vi.stubGlobal("alert", mockAlert);
    Object.defineProperty(window, "location", {
        value: { href: "", assign: mockAssign },
        writable: true,
    });
    mockFetch.mockReset();
    mockAlert.mockReset();
    mockAssign.mockReset();
});

afterEach(() => {
    vi.unstubAllGlobals();
});

describe("OrganizerLogin form", () => {
    // üß© Helper function ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á (label ‡∏´‡∏£‡∏∑‡∏≠ placeholder)
    const fillByLabelOrPlaceholder = (labelOrPlaceholder: string, value: string) => {
        const input =
            screen.queryByPlaceholderText(labelOrPlaceholder) ||
            screen.queryByLabelText(labelOrPlaceholder) ||
            screen.queryByRole("textbox", { name: new RegExp(labelOrPlaceholder, "i") }); // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏° fallback

        if (!input) {
            throw new Error(` ‡πÑ‡∏°‡πà‡∏û‡∏ö input ‡∏ó‡∏µ‡πà label ‡∏´‡∏£‡∏∑‡∏≠ placeholder = "${labelOrPlaceholder}"`);
        }

        fireEvent.change(input, { target: { value } });
    };
    it("renders all key fields", () => {
        render(
            <MemoryRouter>
                <OrganizerLogin />
            </MemoryRouter>
        );

        // üî∏ ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å getByLabelText ‚Üí ‡πÉ‡∏ä‡πâ getByPlaceholderText ‡πÅ‡∏ó‡∏ô
        expect(screen.getByPlaceholderText("you@company.com")).toBeInTheDocument();
        expect(screen.getByPlaceholderText("a‚Äìz, 0‚Äì9, _ (4‚Äì20 ‡∏ï‡∏±‡∏ß)")).toBeInTheDocument();
        expect(screen.getByPlaceholderText("‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£+‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")).toBeInTheDocument();
    });

    it("shows validation errors for empty fields", async () => {
        render(<OrganizerLogin />);
        fireEvent.click(
            screen.getByRole("button", { name: /Create Organizer Account/i })
        );
        await waitFor(() => {
            expect(screen.getByText("‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•")).toBeInTheDocument();
            expect(screen.getByText("‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")).toBeInTheDocument();
            expect(screen.getByText("‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")).toBeInTheDocument();
            expect(screen.getByText("‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á")).toBeInTheDocument();
            expect(screen.getByText("‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•")).toBeInTheDocument();
            expect(screen.getByText("‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£")).toBeInTheDocument();
            expect(screen.getByText("‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó/‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£")).toBeInTheDocument();
            expect(screen.getByText("‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ")).toBeInTheDocument();
            expect(screen.getByText("‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ)")).toBeInTheDocument();
        });
    });

    it("toggles password visibility", () => {
        render(<OrganizerLogin />);

        const toggleBtn = screen.getByLabelText("Show password");
        const pwdInput = screen.getByPlaceholderText("‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£+‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç");

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô type=password
        expect(pwdInput).toHaveAttribute("type", "password");

        // ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        fireEvent.click(toggleBtn);
        expect(pwdInput).toHaveAttribute("type", "text");

        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô hide ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        fireEvent.click(screen.getByLabelText("Hide password"));
        expect(pwdInput).toHaveAttribute("type", "password");
    });
});
