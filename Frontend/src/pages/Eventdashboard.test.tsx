import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { describe, it, expect, vi, beforeEach } from "vitest";
import { MemoryRouter, Route, Routes } from "react-router-dom";
import EventDashboard from "../pages/Eventdashboard";

// mock ‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å (Sidebar ‡πÅ‡∏•‡∏∞ Input)
vi.mock("@/components/sidebarorg", () => ({
    Sidebar: () => <div data-testid="sidebar">SidebarMock</div>,
}));

vi.mock("@/components/inputtxt", () => ({
    Input: ({ value, onChange, placeholder }: any) => (
        <input
            data-testid="search-input"
            value={value}
            onChange={onChange}
            placeholder={placeholder}
        />
    ),
}));

describe("EventDashboard Page", () => {
    beforeEach(() => {
        vi.clearAllMocks();
    });

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢ render ‡∏´‡∏ô‡πâ‡∏≤ EventDashboard ‡∏û‡∏£‡πâ‡∏≠‡∏° Router ‡∏à‡∏≥‡∏•‡∏≠‡∏á
    const renderWithRouter = (initialPath = "/event/123") =>
        render(
            <MemoryRouter initialEntries={[initialPath]}>
                <Routes>
                    {/* ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ Dashboard */}
                    <Route path="/event/:eventId" element={<EventDashboard />} />
                    {/* ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ organization (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô navigate test ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ) */}
                    <Route path="/organizationmnge" element={<div>Org Page</div>} />
                </Routes>
            </MemoryRouter>
        );

    //  1Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤ Dashboard ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏Ñ‡∏£‡∏ö
    it("renders all KPI cards and sidebar", () => {
        renderWithRouter();

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ Sidebar ‡πÅ‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        expect(screen.getByTestId("sidebar")).toBeInTheDocument();
        expect(screen.getByText("Event Dashboard")).toBeInTheDocument();
        expect(screen.getByText(/Event ID:/)).toBeInTheDocument();

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πå‡∏î KPI ‡∏ó‡∏±‡πâ‡∏á 3 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        expect(screen.getByText("Net Payout (THB)")).toBeInTheDocument();
        expect(screen.getByText("Total Ticket Sold")).toBeInTheDocument();
        expect(screen.getByText("Total Summary")).toBeInTheDocument();
    });

    // üß© 2Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á (Available / Reserved / Sold) ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    it("displays correct badges for seat summary", () => {
        renderWithRouter();

        expect(screen.getByText(/Available Seat : 40/)).toBeInTheDocument();
        expect(screen.getByText(/Reserved Seat : 12/)).toBeInTheDocument();
        expect(screen.getByText(/Sold Seat : 8/)).toBeInTheDocument();
    });

    // üß© 3Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mock seats ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏ö (‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏£‡∏≠‡∏á)
    it("shows all mock rows initially", () => {
        renderWithRouter();

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ seat ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÉ‡∏ô MOCK_SEATS ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏Ñ‡∏£‡∏ö
        expect(screen.getByText("B12")).toBeInTheDocument();
        expect(screen.getByText("C20")).toBeInTheDocument();
        expect(screen.getByText("A01")).toBeInTheDocument();
    });

    // üß© 4Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (filter) ‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    it("filters rows based on search query", async () => {
        renderWithRouter();

        // ‚úÖ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô "ZOMBIE" ‡∏•‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á search
        const input = screen.getByTestId("search-input");
        fireEvent.change(input, { target: { value: "ZOMBIE" } });

        // ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÅ‡∏Ñ‡πà ZOMBIE
        await waitFor(() => {
            expect(screen.getByText("ZOMBIE")).toBeInTheDocument();
        });

        // ‚úÖ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ NANA (‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å)
        expect(screen.queryByText("NANA")).not.toBeInTheDocument();
    });

    // üß© 5Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡πâ‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (StatusBadge) COMPLETE / UNPAID ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    it("renders status badges correctly", () => {
        renderWithRouter();

        expect(screen.getAllByText("COMPLETE")[0]).toBeInTheDocument();
        expect(screen.getAllByText("UNPAID")[0]).toBeInTheDocument();
    });

    // üß© 6Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏™‡∏£‡∏∏‡∏õ (Donut chart) ‡πÅ‡∏•‡∏∞ legend ‡∏ß‡πà‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    it("renders donut and legend with correct values", () => {
        renderWithRouter();

        // ‚úÖ donut ‡∏Ñ‡πà‡∏≤ 0%
        expect(screen.getByText("0%")).toBeInTheDocument();

        // ‚úÖ legend ‡∏°‡∏µ Paid / Pending
        expect(screen.getByText(/Paid/)).toBeInTheDocument();
        expect(screen.getByText(/Pending/)).toBeInTheDocument();
    });
});
